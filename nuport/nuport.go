// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BinaryMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type BinaryMerkleProof struct {
	SideNodes [][32]byte
	Key       *big.Int
	NumLeaves *big.Int
}

// DataRootTuple is an auto generated low-level Go binding around an user-defined struct.
type DataRootTuple struct {
	Height   *big.Int
	DataRoot [32]byte
}

// SP1NuportInitParameters is an auto generated low-level Go binding around an user-defined struct.
type SP1NuportInitParameters struct {
	Guardian          common.Address
	Height            uint64
	Header            [32]byte
	NuportProgramVkey [32]byte
	Verifier          common.Address
}

// BindingsMetaData contains all meta data concerning the Bindings contract.
var BindingsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ContractFrozen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyGuardian\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyTimelock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetBlockNotInRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrustedHeaderMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrustedHeaderNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"endBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataCommitment\",\"type\":\"bytes32\"}],\"name\":\"DataCommitmentStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"}],\"name\":\"HeadUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"trustedBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"targetBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorBitmap\",\"type\":\"uint256\"}],\"name\":\"ValidatorBitmapEquivocation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DATA_COMMITMENT_MAX\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedRelayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"blockHeightToHeaderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicValues\",\"type\":\"bytes\"}],\"name\":\"commitHeaderRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway_deprecated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"headerRangeFunctionId_deprecated\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"header\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nuportProgramVkey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"structSP1Nuport.InitParameters\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextHeaderFunctionId_depcrecated\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuportProgramVkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_checkRelayer\",\"type\":\"bool\"}],\"name\":\"setCheckRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"state_dataCommitments\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_proofNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"updateFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_height\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_header\",\"type\":\"bytes32\"}],\"name\":\"updateGenesisState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_programVkey\",\"type\":\"bytes32\"}],\"name\":\"updateProgramVkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"updateVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contractISP1Verifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proofNonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structDataRootTuple\",\"name\":\"_tuple\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"structBinaryMerkleProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a060405230608052610105805460ff1916905534801561001e575f80fd5b5061002761002c565b6100e8565b5f54610100900460ff16156100975760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff908116146100e6575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516127f961011c5f395f8181610863015281816108a3015281816109b2015281816109f20152610a7f01526127f95ff3fe6080604052600436106101fc575f3560e01c806355ae3f221161011357806397fc007c1161009d578063c87053cc1161006d578063c87053cc146105df578063d547741f146105f9578063f288a2e214610618578063f62ac70f1461064b578063ffa1ad741461066a575f80fd5b806397fc007c1461056d578063a217fddf1461058c578063aeeed33e1461059f578063b14ba993146105ca575f80fd5b806382e0cf6b116100e357806382e0cf6b146104cb5780638455a3cf146104ea5780638cba8b6a146105095780638daf56911461053857806391d148541461054e575f80fd5b806355ae3f22146104595780635f4170a41461046e5780635f63e69c1461048d57806371cdd140146104ac575f80fd5b806324ea54f4116101945780633659cfe6116101645780633659cfe6146103df5780634710384e146103fe5780634c4d30fc146104135780634f1ef2861461043257806352d1902d14610445575f80fd5b806324ea54f4146103495780632b7ac3f3146103695780632f2ff15d146103a157806336568abe146103c0575f80fd5b806311821805116101cf57806311821805146102c55780631f3302a9146102db57806320986ce6146102fa578063248a9ca31461031b575f80fd5b806301ffc9a714610200578063054f7d9c1461023457806307e2da961461024e57806308e93ea51461028c575b5f80fd5b34801561020b575f80fd5b5061021f61021a366004611f77565b61069d565b60405190151581526020015b60405180910390f35b34801561023f575f80fd5b506101015461021f9060ff1681565b348015610259575f80fd5b5060fb5461027490600160a01b90046001600160401b031681565b6040516001600160401b03909116815260200161022b565b348015610297575f80fd5b506102b76102a6366004611fb9565b60fd6020525f908152604090205481565b60405190815260200161022b565b3480156102d0575f80fd5b506102b76101025481565b3480156102e6575f80fd5b5061021f6102f5366004612060565b6106d3565b348015610305575f80fd5b5061031961031436600461219c565b610763565b005b348015610326575f80fd5b506102b76103353660046121b5565b5f90815260c9602052604090206001015490565b348015610354575f80fd5b506102b75f805160206127a483398151915281565b348015610374575f80fd5b5061010354610389906001600160a01b031681565b6040516001600160a01b03909116815260200161022b565b3480156103ac575f80fd5b506103196103bb3660046121e2565b6107b2565b3480156103cb575f80fd5b506103196103da3660046121e2565b6107db565b3480156103ea575f80fd5b506103196103f936600461220c565b610859565b348015610409575f80fd5b506102746103e881565b34801561041e575f80fd5b5061031961042d366004612225565b610936565b610319610440366004612257565b6109a8565b348015610450575f80fd5b506102b7610a73565b348015610464575f80fd5b506102b760fc5481565b348015610479575f80fd5b506103196104883660046122fa565b610b24565b348015610498575f80fd5b5060fb54610389906001600160a01b031681565b3480156104b7575f80fd5b506103196104c63660046121b5565b610d0e565b3480156104d6575f80fd5b506103196104e536600461219c565b610d4a565b3480156104f5575f80fd5b50610319610504366004612357565b610d94565b348015610514575f80fd5b5061021f61052336600461220c565b6101046020525f908152604090205460ff1681565b348015610543575f80fd5b506102b76101005481565b348015610559575f80fd5b5061021f6105683660046121e2565b6110d9565b348015610578575f80fd5b5061031961058736600461220c565b611103565b348015610597575f80fd5b506102b75f81565b3480156105aa575f80fd5b506102b76105b93660046121b5565b60fe6020525f908152604090205481565b3480156105d5575f80fd5b506102b760ff5481565b3480156105ea575f80fd5b506101055461021f9060ff1681565b348015610604575f80fd5b506103196106133660046121e2565b61115c565b348015610623575f80fd5b506102b77ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0581565b348015610656575f80fd5b506103196106653660046123c1565b611180565b348015610675575f80fd5b5060408051808201825260058152640312e312e360dc1b6020820152905161022b91906123e9565b5f6001600160e01b03198216637965db0b60e01b14806106cd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610101545f9060ff16156106fa57604051634051e96160e01b815260040160405180910390fd5b831580610709575060fc548410155b1561071557505f61075c565b5f84815260fe6020908152604080832054815187518185015292870151838301528151808403830181526060909301909152919061075690839086906111e1565b50925050505b9392505050565b61077a5f805160206127a4833981519152336110d9565b61079e5760405163ea79172d60e01b81523360048201526024015b60405180910390fd5b610105805460ff1916911515919091179055565b5f82815260c960205260409020600101546107cc816112d5565b6107d683836112df565b505050565b6001600160a01b038116331461084b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610795565b6108558282611364565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108a15760405162461bcd60e51b81526004016107959061241e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108e95f8051602061275d833981519152546001600160a01b031690565b6001600160a01b03161461090f5760405162461bcd60e51b81526004016107959061246a565b610918816113ca565b604080515f8082526020820190925261093391839190611413565b50565b61094d5f805160206127a4833981519152336110d9565b61096c5760405163ea79172d60e01b8152336004820152602401610795565b63ffffffff919091165f81815260fd602052604090209190915560fb805467ffffffffffffffff60a01b1916600160a01b909202919091179055565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109f05760405162461bcd60e51b81526004016107959061241e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a385f8051602061275d833981519152546001600160a01b031690565b6001600160a01b031614610a5e5760405162461bcd60e51b81526004016107959061246a565b610a67826113ca565b61085582826001611413565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b125760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610795565b505f8051602061275d83398151915290565b5f54610100900460ff1615808015610b4257505f54600160ff909116105b80610b5b5750303b158015610b5b57505f5460ff166001145b610bbe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610795565b5f805460ff191660011790558015610bdf575f805461ff0019166101001790555b610c01610bef602084018461220c565b610bfc602085018561220c565b61157d565b610101805460ff191690556040820180359060fd905f90610c259060208701611fb9565b6001600160401b03166001600160401b031681526020019081526020015f2081905550816020016020810190610c5b9190611fb9565b60fb80546001600160401b0392909216600160a01b0267ffffffffffffffff60a01b19909216919091179055606082013561010255610ca060a083016080840161220c565b61010380546001600160a01b0319166001600160a01b0392909216919091179055600160fc558015610855575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610d255f805160206127a4833981519152336110d9565b610d445760405163ea79172d60e01b8152336004820152602401610795565b61010255565b610d615f805160206127a4833981519152336110d9565b610d805760405163ea79172d60e01b8152336004820152602401610795565b610101805460ff1916911515919091179055565b6101055460ff168015610db75750335f908152610104602052604090205460ff16155b15610dd5576040516333eb1cdb60e01b815260040160405180910390fd5b6101015460ff1615610dfa57604051634051e96160e01b815260040160405180910390fd5b5f610e07828401846124b6565b60fb54600160a01b90046001600160401b03165f90815260fd602052604090205490915080610e4957604051630f49c3c160e21b815260040160405180910390fd5b81518114610e6a57604051635efdb0ef60e01b815260040160405180910390fd5b60fb5460808301516001600160401b03600160a01b90920482169116111580610ec0575060fb5460808301516103e891610eb591600160a01b9091046001600160401b03169061254e565b6001600160401b0316115b15610ede5760405163f277783560e01b815260040160405180910390fd5b610103546101025460405163020a49e360e51b81526001600160a01b03909216916341493c6091610f1991889088908c908c90600401612595565b5f6040518083038186803b158015610f2f575f80fd5b505afa158015610f41573d5f803e3d5ffd5b5050506080830151602080850151604080516001600160401b039094168452918301527f292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d92500160405180910390a1816040015182608001516001600160401b031660fb60149054906101000a90046001600160401b03166001600160401b03167f34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb60fc54604051610ff591815260200190565b60405180910390a4606080830151608084015160a0850151604080516001600160401b039485168152939092166020840152908201527f034c7608fd99db72330fdb1bcf6386af42ee9b6125664743942b942a8df4a351910160405180910390a160208083015160808401516001600160401b03165f90815260fd83526040808220929092558185015160fc8054835260fe909452918120919091558154919061109e836125cd565b9091555050506080015160fb80546001600160401b03909216600160a01b0267ffffffffffffffff60a01b1990921691909117905550505050565b5f91825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61111a5f805160206127a4833981519152336110d9565b6111395760405163ea79172d60e01b8152336004820152602401610795565b61010380546001600160a01b0319166001600160a01b0392909216919091179055565b5f82815260c96020526040902060010154611176816112d5565b6107d68383611364565b6111975f805160206127a4833981519152336110d9565b6111b65760405163ea79172d60e01b8152336004820152602401610795565b6001600160a01b03919091165f90815261010460205260409020805460ff1916911515919091179055565b5f806001846040015111611207578351511561120257505f905060016112cd565b61122c565b611219846020015185604001516115fe565b8451511461122c57505f905060016112cd565b836040015184602001511061124657505f905060026112cd565b5f61125084611691565b8551519091505f0361128057846040015160010361127457851491505f90506112cd565b5f8092509250506112cd565b5f8061129987602001518860400151858a5f0151611702565b90925090505f8160058111156112b1576112b16125e5565b146112c3575f945092506112cd915050565b50861492505f9150505b935093915050565b610933813361187e565b6112e982826110d9565b610855575f82815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113203390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61136e82826110d9565b15610855575f82815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6113f47ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f05336110d9565b61093357604051636744392960e11b8152336004820152602401610795565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611446576107d6836118d7565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156114a0575060408051601f3d908101601f1916820190925261149d918101906125f9565b60015b6115035760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610795565b5f8051602061275d83398151915281146115715760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610795565b506107d6838383611972565b5f54610100900460ff166115a35760405162461bcd60e51b815260040161079590612610565b6115ab61199c565b6115b361199c565b6115bd5f836112df565b6115e77ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f05836112df565b6108555f805160206127a4833981519152826112df565b5f6001821161160e57505f6106cd565b611617826119c4565b6116239061010061265b565b90505f61163160018361265b565b6001901b9050600181611644919061265b565b841161165057506106cd565b806001036116625760019150506106cd565b61167e61166f828661265b565b611679838661265b565b6115fe565b61168990600161266e565b9150506106cd565b5f60025f60f81b836040516020016116aa929190612698565b60408051601f19818403018152908290526116c4916126b3565b602060405180830381855afa1580156116df573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906106cd91906125f9565b5f80845f0361171657508290506003611875565b8460010361173a5782511561173057508290506004611875565b508290505f611875565b82515f0361174d57508290506005611875565b5f611757866119f0565b90505f611772855f6001885161176d919061265b565b611a2d565b90505f828910156117f2575f61178a8a858a86611702565b925090505f8260058111156117a1576117a16125e5565b146117b457508694509250611875915050565b6117e4818860018a516117c7919061265b565b815181106117d7576117d76126be565b6020026020010151611bb1565b5f9550955050505050611875565b5f611811611800858c61265b565b61180a868c61265b565b8a86611702565b925090505f826005811115611828576118286125e5565b1461183b57508694509250611875915050565b61186b876001895161184d919061265b565b8151811061185d5761185d6126be565b602002602001015182611bb1565b5f95509550505050505b94509492505050565b61188882826110d9565b6108555761189581611c2c565b6118a0836020611c3e565b6040516020016118b19291906126d2565b60408051601f198184030181529082905262461bcd60e51b8252610795916004016123e9565b6001600160a01b0381163b6119445760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610795565b5f8051602061275d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61197b83611dd3565b5f825111806119875750805b156107d6576119968383611e12565b50505050565b5f54610100900460ff166119c25760405162461bcd60e51b815260040161079590612610565b565b5f5b81816001901b10156119e4576119dd60018261266e565b90506119c6565b6106cd8161010061265b565b5f60018210156119fe575f80fd5b5f611a0883611e37565b90505f611a1660018361265b565b6001901b905083810361075c5760011c9392505050565b606081831115611a925760405162461bcd60e51b815260206004820152602a60248201527f496e76616c69642072616e67653a205f626567696e2069732067726561746572604482015269081d1a185b8817d95b9960b21b6064820152608401610795565b8351831180611aa15750835182115b15611b065760405162461bcd60e51b815260206004820152602f60248201527f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260448201526e65206f7574206f6620626f756e647360881b6064820152608401610795565b5f611b11848461265b565b6001600160401b03811115611b2857611b28611fd2565b604051908082528060200260200182016040528015611b51578160200160208202803683370190505b509050835b83811015611ba857858181518110611b7057611b706126be565b6020026020010151828683611b85919061265b565b81518110611b9557611b956126be565b6020908102919091010152600101611b56565b50949350505050565b604051600160f81b602082015260218101839052604181018290525f9060029060610160408051601f1981840301815290829052611bee916126b3565b602060405180830381855afa158015611c09573d5f803e3d5ffd5b5050506040513d601f19601f8201168201806040525081019061075c91906125f9565b60606106cd6001600160a01b03831660145b60605f611c4c836002612730565b611c5790600261266e565b6001600160401b03811115611c6e57611c6e611fd2565b6040519080825280601f01601f191660200182016040528015611c98576020820181803683370190505b509050600360fc1b815f81518110611cb257611cb26126be565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110611ce057611ce06126be565b60200101906001600160f81b03191690815f1a9053505f611d02846002612730565b611d0d90600161266e565b90505b6001811115611d84576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d4157611d416126be565b1a60f81b828281518110611d5757611d576126be565b60200101906001600160f81b03191690815f1a90535060049490941c93611d7d81612747565b9050611d10565b50831561075c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610795565b611ddc816118d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b606061075c838360405180606001604052806027815260200161277d60279139611e59565b5f805b82156106cd5780611e4a816125cd565b915050600183901c9250611e3a565b60605f80856001600160a01b031685604051611e7591906126b3565b5f60405180830381855af49150503d805f8114611ead576040519150601f19603f3d011682016040523d82523d5f602084013e611eb2565b606091505b5091509150611ec386838387611ecd565b9695505050505050565b60608315611f3b5782515f03611f34576001600160a01b0385163b611f345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610795565b5081611f45565b611f458383611f4d565b949350505050565b815115611f5d5781518083602001fd5b8060405162461bcd60e51b815260040161079591906123e9565b5f60208284031215611f87575f80fd5b81356001600160e01b03198116811461075c575f80fd5b80356001600160401b0381168114611fb4575f80fd5b919050565b5f60208284031215611fc9575f80fd5b61075c82611f9e565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b038111828210171561200857612008611fd2565b60405290565b604051606081016001600160401b038111828210171561200857612008611fd2565b604051601f8201601f191681016001600160401b038111828210171561205857612058611fd2565b604052919050565b5f805f8385036080811215612073575f80fd5b843593506040601f1982011215612088575f80fd5b50612091611fe6565b6020858101358252604086013590820152915060608401356001600160401b038111156120bc575f80fd5b8401606081870312156120cd575f80fd5b6120d561200e565b81356001600160401b038111156120ea575f80fd5b8201601f810188136120fa575f80fd5b80356001600160401b0381111561211357612113611fd2565b8060051b61212360208201612030565b9182526020818401810192908101908b84111561213e575f80fd5b6020850194505b8385101561216457843580835260209586019590935090910190612145565b855250505050602082810135908201526040918201359181019190915292959194509192509050565b80358015158114611fb4575f80fd5b5f602082840312156121ac575f80fd5b61075c8261218d565b5f602082840312156121c5575f80fd5b5035919050565b80356001600160a01b0381168114611fb4575f80fd5b5f80604083850312156121f3575f80fd5b82359150612203602084016121cc565b90509250929050565b5f6020828403121561221c575f80fd5b61075c826121cc565b5f8060408385031215612236575f80fd5b823563ffffffff81168114612249575f80fd5b946020939093013593505050565b5f8060408385031215612268575f80fd5b612271836121cc565b915060208301356001600160401b0381111561228b575f80fd5b8301601f8101851361229b575f80fd5b80356001600160401b038111156122b4576122b4611fd2565b6122c7601f8201601f1916602001612030565b8181528660208385010111156122db575f80fd5b816020840160208301375f602083830101528093505050509250929050565b5f60a082840312801561230b575f80fd5b509092915050565b5f8083601f840112612323575f80fd5b5081356001600160401b03811115612339575f80fd5b602083019150836020828501011115612350575f80fd5b9250929050565b5f805f806040858703121561236a575f80fd5b84356001600160401b0381111561237f575f80fd5b61238b87828801612313565b90955093505060208501356001600160401b038111156123a9575f80fd5b6123b587828801612313565b95989497509550505050565b5f80604083850312156123d2575f80fd5b6123db836121cc565b91506122036020840161218d565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b5f60c08284031280156124c7575f80fd5b5060405160c081016001600160401b03811182821017156124ea576124ea611fd2565b60409081528335825260208085013590830152838101359082015261251160608401611f9e565b606082015261252260808401611f9e565b608082015260a0928301359281019290925250919050565b634e487b7160e01b5f52601160045260245ffd5b6001600160401b0382811682821603908111156106cd576106cd61253a565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b858152606060208201525f6125ae60608301868861256d565b82810360408401526125c181858761256d565b98975050505050505050565b5f600182016125de576125de61253a565b5060010190565b634e487b7160e01b5f52602160045260245ffd5b5f60208284031215612609575f80fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b818103818111156106cd576106cd61253a565b808201808211156106cd576106cd61253a565b5f81518060208401855e5f93019283525090919050565b6001600160f81b0319831681525f611f456001830184612681565b5f61075c8284612681565b634e487b7160e01b5f52603260045260245ffd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f6127036017830185612681565b7001034b99036b4b9b9b4b733903937b6329607d1b81526127276011820185612681565b95945050505050565b80820281158282048414176106cd576106cd61253a565b5f816127555761275561253a565b505f19019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656455435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041a2646970667358221220d1f2e7dbc4a3c8302439b51882bfff633d7aca19a1e1b82d7e7b84598ccbf50b64736f6c634300081a0033",
}

// BindingsABI is the input ABI used to generate the binding from.
// Deprecated: Use BindingsMetaData.ABI instead.
var BindingsABI = BindingsMetaData.ABI

// BindingsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BindingsMetaData.Bin instead.
var BindingsBin = BindingsMetaData.Bin

// DeployBindings deploys a new Ethereum contract, binding an instance of Bindings to it.
func DeployBindings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bindings, error) {
	parsed, err := BindingsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BindingsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bindings{BindingsCaller: BindingsCaller{contract: contract}, BindingsTransactor: BindingsTransactor{contract: contract}, BindingsFilterer: BindingsFilterer{contract: contract}}, nil
}

// Bindings is an auto generated Go binding around an Ethereum contract.
type Bindings struct {
	BindingsCaller     // Read-only binding to the contract
	BindingsTransactor // Write-only binding to the contract
	BindingsFilterer   // Log filterer for contract events
}

// BindingsCaller is an auto generated read-only Go binding around an Ethereum contract.
type BindingsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BindingsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BindingsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BindingsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BindingsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BindingsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BindingsSession struct {
	Contract     *Bindings         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BindingsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BindingsCallerSession struct {
	Contract *BindingsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// BindingsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BindingsTransactorSession struct {
	Contract     *BindingsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BindingsRaw is an auto generated low-level Go binding around an Ethereum contract.
type BindingsRaw struct {
	Contract *Bindings // Generic contract binding to access the raw methods on
}

// BindingsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BindingsCallerRaw struct {
	Contract *BindingsCaller // Generic read-only contract binding to access the raw methods on
}

// BindingsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BindingsTransactorRaw struct {
	Contract *BindingsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBindings creates a new instance of Bindings, bound to a specific deployed contract.
func NewBindings(address common.Address, backend bind.ContractBackend) (*Bindings, error) {
	contract, err := bindBindings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bindings{BindingsCaller: BindingsCaller{contract: contract}, BindingsTransactor: BindingsTransactor{contract: contract}, BindingsFilterer: BindingsFilterer{contract: contract}}, nil
}

// NewBindingsCaller creates a new read-only instance of Bindings, bound to a specific deployed contract.
func NewBindingsCaller(address common.Address, caller bind.ContractCaller) (*BindingsCaller, error) {
	contract, err := bindBindings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BindingsCaller{contract: contract}, nil
}

// NewBindingsTransactor creates a new write-only instance of Bindings, bound to a specific deployed contract.
func NewBindingsTransactor(address common.Address, transactor bind.ContractTransactor) (*BindingsTransactor, error) {
	contract, err := bindBindings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BindingsTransactor{contract: contract}, nil
}

// NewBindingsFilterer creates a new log filterer instance of Bindings, bound to a specific deployed contract.
func NewBindingsFilterer(address common.Address, filterer bind.ContractFilterer) (*BindingsFilterer, error) {
	contract, err := bindBindings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BindingsFilterer{contract: contract}, nil
}

// bindBindings binds a generic wrapper to an already deployed contract.
func bindBindings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BindingsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bindings *BindingsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bindings.Contract.BindingsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bindings *BindingsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bindings.Contract.BindingsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bindings *BindingsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bindings.Contract.BindingsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bindings *BindingsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bindings.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bindings *BindingsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bindings.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bindings *BindingsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bindings.Contract.contract.Transact(opts, method, params...)
}

// DATACOMMITMENTMAX is a free data retrieval call binding the contract method 0x4710384e.
//
// Solidity: function DATA_COMMITMENT_MAX() view returns(uint64)
func (_Bindings *BindingsCaller) DATACOMMITMENTMAX(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "DATA_COMMITMENT_MAX")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// DATACOMMITMENTMAX is a free data retrieval call binding the contract method 0x4710384e.
//
// Solidity: function DATA_COMMITMENT_MAX() view returns(uint64)
func (_Bindings *BindingsSession) DATACOMMITMENTMAX() (uint64, error) {
	return _Bindings.Contract.DATACOMMITMENTMAX(&_Bindings.CallOpts)
}

// DATACOMMITMENTMAX is a free data retrieval call binding the contract method 0x4710384e.
//
// Solidity: function DATA_COMMITMENT_MAX() view returns(uint64)
func (_Bindings *BindingsCallerSession) DATACOMMITMENTMAX() (uint64, error) {
	return _Bindings.Contract.DATACOMMITMENTMAX(&_Bindings.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bindings *BindingsCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bindings *BindingsSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bindings.Contract.DEFAULTADMINROLE(&_Bindings.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bindings *BindingsCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bindings.Contract.DEFAULTADMINROLE(&_Bindings.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_Bindings *BindingsCaller) GUARDIANROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "GUARDIAN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_Bindings *BindingsSession) GUARDIANROLE() ([32]byte, error) {
	return _Bindings.Contract.GUARDIANROLE(&_Bindings.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_Bindings *BindingsCallerSession) GUARDIANROLE() ([32]byte, error) {
	return _Bindings.Contract.GUARDIANROLE(&_Bindings.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_Bindings *BindingsCaller) TIMELOCKROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "TIMELOCK_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_Bindings *BindingsSession) TIMELOCKROLE() ([32]byte, error) {
	return _Bindings.Contract.TIMELOCKROLE(&_Bindings.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_Bindings *BindingsCallerSession) TIMELOCKROLE() ([32]byte, error) {
	return _Bindings.Contract.TIMELOCKROLE(&_Bindings.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_Bindings *BindingsCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_Bindings *BindingsSession) VERSION() (string, error) {
	return _Bindings.Contract.VERSION(&_Bindings.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_Bindings *BindingsCallerSession) VERSION() (string, error) {
	return _Bindings.Contract.VERSION(&_Bindings.CallOpts)
}

// ApprovedRelayers is a free data retrieval call binding the contract method 0x8cba8b6a.
//
// Solidity: function approvedRelayers(address ) view returns(bool)
func (_Bindings *BindingsCaller) ApprovedRelayers(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "approvedRelayers", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ApprovedRelayers is a free data retrieval call binding the contract method 0x8cba8b6a.
//
// Solidity: function approvedRelayers(address ) view returns(bool)
func (_Bindings *BindingsSession) ApprovedRelayers(arg0 common.Address) (bool, error) {
	return _Bindings.Contract.ApprovedRelayers(&_Bindings.CallOpts, arg0)
}

// ApprovedRelayers is a free data retrieval call binding the contract method 0x8cba8b6a.
//
// Solidity: function approvedRelayers(address ) view returns(bool)
func (_Bindings *BindingsCallerSession) ApprovedRelayers(arg0 common.Address) (bool, error) {
	return _Bindings.Contract.ApprovedRelayers(&_Bindings.CallOpts, arg0)
}

// BlockHeightToHeaderHash is a free data retrieval call binding the contract method 0x08e93ea5.
//
// Solidity: function blockHeightToHeaderHash(uint64 ) view returns(bytes32)
func (_Bindings *BindingsCaller) BlockHeightToHeaderHash(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "blockHeightToHeaderHash", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BlockHeightToHeaderHash is a free data retrieval call binding the contract method 0x08e93ea5.
//
// Solidity: function blockHeightToHeaderHash(uint64 ) view returns(bytes32)
func (_Bindings *BindingsSession) BlockHeightToHeaderHash(arg0 uint64) ([32]byte, error) {
	return _Bindings.Contract.BlockHeightToHeaderHash(&_Bindings.CallOpts, arg0)
}

// BlockHeightToHeaderHash is a free data retrieval call binding the contract method 0x08e93ea5.
//
// Solidity: function blockHeightToHeaderHash(uint64 ) view returns(bytes32)
func (_Bindings *BindingsCallerSession) BlockHeightToHeaderHash(arg0 uint64) ([32]byte, error) {
	return _Bindings.Contract.BlockHeightToHeaderHash(&_Bindings.CallOpts, arg0)
}

// CheckRelayer is a free data retrieval call binding the contract method 0xc87053cc.
//
// Solidity: function checkRelayer() view returns(bool)
func (_Bindings *BindingsCaller) CheckRelayer(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "checkRelayer")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckRelayer is a free data retrieval call binding the contract method 0xc87053cc.
//
// Solidity: function checkRelayer() view returns(bool)
func (_Bindings *BindingsSession) CheckRelayer() (bool, error) {
	return _Bindings.Contract.CheckRelayer(&_Bindings.CallOpts)
}

// CheckRelayer is a free data retrieval call binding the contract method 0xc87053cc.
//
// Solidity: function checkRelayer() view returns(bool)
func (_Bindings *BindingsCallerSession) CheckRelayer() (bool, error) {
	return _Bindings.Contract.CheckRelayer(&_Bindings.CallOpts)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() view returns(bool)
func (_Bindings *BindingsCaller) Frozen(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "frozen")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() view returns(bool)
func (_Bindings *BindingsSession) Frozen() (bool, error) {
	return _Bindings.Contract.Frozen(&_Bindings.CallOpts)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() view returns(bool)
func (_Bindings *BindingsCallerSession) Frozen() (bool, error) {
	return _Bindings.Contract.Frozen(&_Bindings.CallOpts)
}

// GatewayDeprecated is a free data retrieval call binding the contract method 0x5f63e69c.
//
// Solidity: function gateway_deprecated() view returns(address)
func (_Bindings *BindingsCaller) GatewayDeprecated(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "gateway_deprecated")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GatewayDeprecated is a free data retrieval call binding the contract method 0x5f63e69c.
//
// Solidity: function gateway_deprecated() view returns(address)
func (_Bindings *BindingsSession) GatewayDeprecated() (common.Address, error) {
	return _Bindings.Contract.GatewayDeprecated(&_Bindings.CallOpts)
}

// GatewayDeprecated is a free data retrieval call binding the contract method 0x5f63e69c.
//
// Solidity: function gateway_deprecated() view returns(address)
func (_Bindings *BindingsCallerSession) GatewayDeprecated() (common.Address, error) {
	return _Bindings.Contract.GatewayDeprecated(&_Bindings.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bindings *BindingsCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bindings *BindingsSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bindings.Contract.GetRoleAdmin(&_Bindings.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bindings *BindingsCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bindings.Contract.GetRoleAdmin(&_Bindings.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bindings *BindingsCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bindings *BindingsSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bindings.Contract.HasRole(&_Bindings.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bindings *BindingsCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bindings.Contract.HasRole(&_Bindings.CallOpts, role, account)
}

// HeaderRangeFunctionIdDeprecated is a free data retrieval call binding the contract method 0xb14ba993.
//
// Solidity: function headerRangeFunctionId_deprecated() view returns(bytes32)
func (_Bindings *BindingsCaller) HeaderRangeFunctionIdDeprecated(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "headerRangeFunctionId_deprecated")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HeaderRangeFunctionIdDeprecated is a free data retrieval call binding the contract method 0xb14ba993.
//
// Solidity: function headerRangeFunctionId_deprecated() view returns(bytes32)
func (_Bindings *BindingsSession) HeaderRangeFunctionIdDeprecated() ([32]byte, error) {
	return _Bindings.Contract.HeaderRangeFunctionIdDeprecated(&_Bindings.CallOpts)
}

// HeaderRangeFunctionIdDeprecated is a free data retrieval call binding the contract method 0xb14ba993.
//
// Solidity: function headerRangeFunctionId_deprecated() view returns(bytes32)
func (_Bindings *BindingsCallerSession) HeaderRangeFunctionIdDeprecated() ([32]byte, error) {
	return _Bindings.Contract.HeaderRangeFunctionIdDeprecated(&_Bindings.CallOpts)
}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_Bindings *BindingsCaller) LatestBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "latestBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_Bindings *BindingsSession) LatestBlock() (uint64, error) {
	return _Bindings.Contract.LatestBlock(&_Bindings.CallOpts)
}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_Bindings *BindingsCallerSession) LatestBlock() (uint64, error) {
	return _Bindings.Contract.LatestBlock(&_Bindings.CallOpts)
}

// NextHeaderFunctionIdDepcrecated is a free data retrieval call binding the contract method 0x8daf5691.
//
// Solidity: function nextHeaderFunctionId_depcrecated() view returns(bytes32)
func (_Bindings *BindingsCaller) NextHeaderFunctionIdDepcrecated(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "nextHeaderFunctionId_depcrecated")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NextHeaderFunctionIdDepcrecated is a free data retrieval call binding the contract method 0x8daf5691.
//
// Solidity: function nextHeaderFunctionId_depcrecated() view returns(bytes32)
func (_Bindings *BindingsSession) NextHeaderFunctionIdDepcrecated() ([32]byte, error) {
	return _Bindings.Contract.NextHeaderFunctionIdDepcrecated(&_Bindings.CallOpts)
}

// NextHeaderFunctionIdDepcrecated is a free data retrieval call binding the contract method 0x8daf5691.
//
// Solidity: function nextHeaderFunctionId_depcrecated() view returns(bytes32)
func (_Bindings *BindingsCallerSession) NextHeaderFunctionIdDepcrecated() ([32]byte, error) {
	return _Bindings.Contract.NextHeaderFunctionIdDepcrecated(&_Bindings.CallOpts)
}

// NuportProgramVkey is a free data retrieval call binding the contract method 0x11821805.
//
// Solidity: function nuportProgramVkey() view returns(bytes32)
func (_Bindings *BindingsCaller) NuportProgramVkey(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "nuportProgramVkey")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NuportProgramVkey is a free data retrieval call binding the contract method 0x11821805.
//
// Solidity: function nuportProgramVkey() view returns(bytes32)
func (_Bindings *BindingsSession) NuportProgramVkey() ([32]byte, error) {
	return _Bindings.Contract.NuportProgramVkey(&_Bindings.CallOpts)
}

// NuportProgramVkey is a free data retrieval call binding the contract method 0x11821805.
//
// Solidity: function nuportProgramVkey() view returns(bytes32)
func (_Bindings *BindingsCallerSession) NuportProgramVkey() ([32]byte, error) {
	return _Bindings.Contract.NuportProgramVkey(&_Bindings.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Bindings *BindingsCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Bindings *BindingsSession) ProxiableUUID() ([32]byte, error) {
	return _Bindings.Contract.ProxiableUUID(&_Bindings.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Bindings *BindingsCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Bindings.Contract.ProxiableUUID(&_Bindings.CallOpts)
}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_Bindings *BindingsCaller) StateDataCommitments(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "state_dataCommitments", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_Bindings *BindingsSession) StateDataCommitments(arg0 *big.Int) ([32]byte, error) {
	return _Bindings.Contract.StateDataCommitments(&_Bindings.CallOpts, arg0)
}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_Bindings *BindingsCallerSession) StateDataCommitments(arg0 *big.Int) ([32]byte, error) {
	return _Bindings.Contract.StateDataCommitments(&_Bindings.CallOpts, arg0)
}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_Bindings *BindingsCaller) StateProofNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "state_proofNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_Bindings *BindingsSession) StateProofNonce() (*big.Int, error) {
	return _Bindings.Contract.StateProofNonce(&_Bindings.CallOpts)
}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_Bindings *BindingsCallerSession) StateProofNonce() (*big.Int, error) {
	return _Bindings.Contract.StateProofNonce(&_Bindings.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Bindings *BindingsCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Bindings *BindingsSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Bindings.Contract.SupportsInterface(&_Bindings.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Bindings *BindingsCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Bindings.Contract.SupportsInterface(&_Bindings.CallOpts, interfaceId)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Bindings *BindingsCaller) Verifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Bindings *BindingsSession) Verifier() (common.Address, error) {
	return _Bindings.Contract.Verifier(&_Bindings.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Bindings *BindingsCallerSession) Verifier() (common.Address, error) {
	return _Bindings.Contract.Verifier(&_Bindings.CallOpts)
}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_Bindings *BindingsCaller) VerifyAttestation(opts *bind.CallOpts, _proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "verifyAttestation", _proofNonce, _tuple, _proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_Bindings *BindingsSession) VerifyAttestation(_proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	return _Bindings.Contract.VerifyAttestation(&_Bindings.CallOpts, _proofNonce, _tuple, _proof)
}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_Bindings *BindingsCallerSession) VerifyAttestation(_proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	return _Bindings.Contract.VerifyAttestation(&_Bindings.CallOpts, _proofNonce, _tuple, _proof)
}

// CommitHeaderRange is a paid mutator transaction binding the contract method 0x8455a3cf.
//
// Solidity: function commitHeaderRange(bytes proof, bytes publicValues) returns()
func (_Bindings *BindingsTransactor) CommitHeaderRange(opts *bind.TransactOpts, proof []byte, publicValues []byte) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "commitHeaderRange", proof, publicValues)
}

// CommitHeaderRange is a paid mutator transaction binding the contract method 0x8455a3cf.
//
// Solidity: function commitHeaderRange(bytes proof, bytes publicValues) returns()
func (_Bindings *BindingsSession) CommitHeaderRange(proof []byte, publicValues []byte) (*types.Transaction, error) {
	return _Bindings.Contract.CommitHeaderRange(&_Bindings.TransactOpts, proof, publicValues)
}

// CommitHeaderRange is a paid mutator transaction binding the contract method 0x8455a3cf.
//
// Solidity: function commitHeaderRange(bytes proof, bytes publicValues) returns()
func (_Bindings *BindingsTransactorSession) CommitHeaderRange(proof []byte, publicValues []byte) (*types.Transaction, error) {
	return _Bindings.Contract.CommitHeaderRange(&_Bindings.TransactOpts, proof, publicValues)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bindings *BindingsSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.GrantRole(&_Bindings.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.GrantRole(&_Bindings.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x5f4170a4.
//
// Solidity: function initialize((address,uint64,bytes32,bytes32,address) _params) returns()
func (_Bindings *BindingsTransactor) Initialize(opts *bind.TransactOpts, _params SP1NuportInitParameters) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "initialize", _params)
}

// Initialize is a paid mutator transaction binding the contract method 0x5f4170a4.
//
// Solidity: function initialize((address,uint64,bytes32,bytes32,address) _params) returns()
func (_Bindings *BindingsSession) Initialize(_params SP1NuportInitParameters) (*types.Transaction, error) {
	return _Bindings.Contract.Initialize(&_Bindings.TransactOpts, _params)
}

// Initialize is a paid mutator transaction binding the contract method 0x5f4170a4.
//
// Solidity: function initialize((address,uint64,bytes32,bytes32,address) _params) returns()
func (_Bindings *BindingsTransactorSession) Initialize(_params SP1NuportInitParameters) (*types.Transaction, error) {
	return _Bindings.Contract.Initialize(&_Bindings.TransactOpts, _params)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bindings *BindingsSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.RenounceRole(&_Bindings.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.RenounceRole(&_Bindings.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bindings *BindingsSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.RevokeRole(&_Bindings.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.RevokeRole(&_Bindings.TransactOpts, role, account)
}

// SetCheckRelayer is a paid mutator transaction binding the contract method 0x20986ce6.
//
// Solidity: function setCheckRelayer(bool _checkRelayer) returns()
func (_Bindings *BindingsTransactor) SetCheckRelayer(opts *bind.TransactOpts, _checkRelayer bool) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "setCheckRelayer", _checkRelayer)
}

// SetCheckRelayer is a paid mutator transaction binding the contract method 0x20986ce6.
//
// Solidity: function setCheckRelayer(bool _checkRelayer) returns()
func (_Bindings *BindingsSession) SetCheckRelayer(_checkRelayer bool) (*types.Transaction, error) {
	return _Bindings.Contract.SetCheckRelayer(&_Bindings.TransactOpts, _checkRelayer)
}

// SetCheckRelayer is a paid mutator transaction binding the contract method 0x20986ce6.
//
// Solidity: function setCheckRelayer(bool _checkRelayer) returns()
func (_Bindings *BindingsTransactorSession) SetCheckRelayer(_checkRelayer bool) (*types.Transaction, error) {
	return _Bindings.Contract.SetCheckRelayer(&_Bindings.TransactOpts, _checkRelayer)
}

// SetRelayerApproval is a paid mutator transaction binding the contract method 0xf62ac70f.
//
// Solidity: function setRelayerApproval(address _relayer, bool _approved) returns()
func (_Bindings *BindingsTransactor) SetRelayerApproval(opts *bind.TransactOpts, _relayer common.Address, _approved bool) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "setRelayerApproval", _relayer, _approved)
}

// SetRelayerApproval is a paid mutator transaction binding the contract method 0xf62ac70f.
//
// Solidity: function setRelayerApproval(address _relayer, bool _approved) returns()
func (_Bindings *BindingsSession) SetRelayerApproval(_relayer common.Address, _approved bool) (*types.Transaction, error) {
	return _Bindings.Contract.SetRelayerApproval(&_Bindings.TransactOpts, _relayer, _approved)
}

// SetRelayerApproval is a paid mutator transaction binding the contract method 0xf62ac70f.
//
// Solidity: function setRelayerApproval(address _relayer, bool _approved) returns()
func (_Bindings *BindingsTransactorSession) SetRelayerApproval(_relayer common.Address, _approved bool) (*types.Transaction, error) {
	return _Bindings.Contract.SetRelayerApproval(&_Bindings.TransactOpts, _relayer, _approved)
}

// UpdateFreeze is a paid mutator transaction binding the contract method 0x82e0cf6b.
//
// Solidity: function updateFreeze(bool _freeze) returns()
func (_Bindings *BindingsTransactor) UpdateFreeze(opts *bind.TransactOpts, _freeze bool) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "updateFreeze", _freeze)
}

// UpdateFreeze is a paid mutator transaction binding the contract method 0x82e0cf6b.
//
// Solidity: function updateFreeze(bool _freeze) returns()
func (_Bindings *BindingsSession) UpdateFreeze(_freeze bool) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateFreeze(&_Bindings.TransactOpts, _freeze)
}

// UpdateFreeze is a paid mutator transaction binding the contract method 0x82e0cf6b.
//
// Solidity: function updateFreeze(bool _freeze) returns()
func (_Bindings *BindingsTransactorSession) UpdateFreeze(_freeze bool) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateFreeze(&_Bindings.TransactOpts, _freeze)
}

// UpdateGenesisState is a paid mutator transaction binding the contract method 0x4c4d30fc.
//
// Solidity: function updateGenesisState(uint32 _height, bytes32 _header) returns()
func (_Bindings *BindingsTransactor) UpdateGenesisState(opts *bind.TransactOpts, _height uint32, _header [32]byte) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "updateGenesisState", _height, _header)
}

// UpdateGenesisState is a paid mutator transaction binding the contract method 0x4c4d30fc.
//
// Solidity: function updateGenesisState(uint32 _height, bytes32 _header) returns()
func (_Bindings *BindingsSession) UpdateGenesisState(_height uint32, _header [32]byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateGenesisState(&_Bindings.TransactOpts, _height, _header)
}

// UpdateGenesisState is a paid mutator transaction binding the contract method 0x4c4d30fc.
//
// Solidity: function updateGenesisState(uint32 _height, bytes32 _header) returns()
func (_Bindings *BindingsTransactorSession) UpdateGenesisState(_height uint32, _header [32]byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateGenesisState(&_Bindings.TransactOpts, _height, _header)
}

// UpdateProgramVkey is a paid mutator transaction binding the contract method 0x71cdd140.
//
// Solidity: function updateProgramVkey(bytes32 _programVkey) returns()
func (_Bindings *BindingsTransactor) UpdateProgramVkey(opts *bind.TransactOpts, _programVkey [32]byte) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "updateProgramVkey", _programVkey)
}

// UpdateProgramVkey is a paid mutator transaction binding the contract method 0x71cdd140.
//
// Solidity: function updateProgramVkey(bytes32 _programVkey) returns()
func (_Bindings *BindingsSession) UpdateProgramVkey(_programVkey [32]byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateProgramVkey(&_Bindings.TransactOpts, _programVkey)
}

// UpdateProgramVkey is a paid mutator transaction binding the contract method 0x71cdd140.
//
// Solidity: function updateProgramVkey(bytes32 _programVkey) returns()
func (_Bindings *BindingsTransactorSession) UpdateProgramVkey(_programVkey [32]byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateProgramVkey(&_Bindings.TransactOpts, _programVkey)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifier) returns()
func (_Bindings *BindingsTransactor) UpdateVerifier(opts *bind.TransactOpts, _verifier common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "updateVerifier", _verifier)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifier) returns()
func (_Bindings *BindingsSession) UpdateVerifier(_verifier common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateVerifier(&_Bindings.TransactOpts, _verifier)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifier) returns()
func (_Bindings *BindingsTransactorSession) UpdateVerifier(_verifier common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateVerifier(&_Bindings.TransactOpts, _verifier)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Bindings *BindingsTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Bindings *BindingsSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.UpgradeTo(&_Bindings.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Bindings *BindingsTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.UpgradeTo(&_Bindings.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Bindings *BindingsTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Bindings *BindingsSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpgradeToAndCall(&_Bindings.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Bindings *BindingsTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpgradeToAndCall(&_Bindings.TransactOpts, newImplementation, data)
}

// BindingsAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Bindings contract.
type BindingsAdminChangedIterator struct {
	Event *BindingsAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsAdminChanged represents a AdminChanged event raised by the Bindings contract.
type BindingsAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Bindings *BindingsFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*BindingsAdminChangedIterator, error) {

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &BindingsAdminChangedIterator{contract: _Bindings.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Bindings *BindingsFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *BindingsAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsAdminChanged)
				if err := _Bindings.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Bindings *BindingsFilterer) ParseAdminChanged(log types.Log) (*BindingsAdminChanged, error) {
	event := new(BindingsAdminChanged)
	if err := _Bindings.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Bindings contract.
type BindingsBeaconUpgradedIterator struct {
	Event *BindingsBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsBeaconUpgraded represents a BeaconUpgraded event raised by the Bindings contract.
type BindingsBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Bindings *BindingsFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*BindingsBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &BindingsBeaconUpgradedIterator{contract: _Bindings.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Bindings *BindingsFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *BindingsBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsBeaconUpgraded)
				if err := _Bindings.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Bindings *BindingsFilterer) ParseBeaconUpgraded(log types.Log) (*BindingsBeaconUpgraded, error) {
	event := new(BindingsBeaconUpgraded)
	if err := _Bindings.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsDataCommitmentStoredIterator is returned from FilterDataCommitmentStored and is used to iterate over the raw logs and unpacked data for DataCommitmentStored events raised by the Bindings contract.
type BindingsDataCommitmentStoredIterator struct {
	Event *BindingsDataCommitmentStored // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsDataCommitmentStoredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsDataCommitmentStored)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsDataCommitmentStored)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsDataCommitmentStoredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsDataCommitmentStoredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsDataCommitmentStored represents a DataCommitmentStored event raised by the Bindings contract.
type BindingsDataCommitmentStored struct {
	ProofNonce     *big.Int
	StartBlock     uint64
	EndBlock       uint64
	DataCommitment [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDataCommitmentStored is a free log retrieval operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_Bindings *BindingsFilterer) FilterDataCommitmentStored(opts *bind.FilterOpts, startBlock []uint64, endBlock []uint64, dataCommitment [][32]byte) (*BindingsDataCommitmentStoredIterator, error) {

	var startBlockRule []interface{}
	for _, startBlockItem := range startBlock {
		startBlockRule = append(startBlockRule, startBlockItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}
	var dataCommitmentRule []interface{}
	for _, dataCommitmentItem := range dataCommitment {
		dataCommitmentRule = append(dataCommitmentRule, dataCommitmentItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "DataCommitmentStored", startBlockRule, endBlockRule, dataCommitmentRule)
	if err != nil {
		return nil, err
	}
	return &BindingsDataCommitmentStoredIterator{contract: _Bindings.contract, event: "DataCommitmentStored", logs: logs, sub: sub}, nil
}

// WatchDataCommitmentStored is a free log subscription operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_Bindings *BindingsFilterer) WatchDataCommitmentStored(opts *bind.WatchOpts, sink chan<- *BindingsDataCommitmentStored, startBlock []uint64, endBlock []uint64, dataCommitment [][32]byte) (event.Subscription, error) {

	var startBlockRule []interface{}
	for _, startBlockItem := range startBlock {
		startBlockRule = append(startBlockRule, startBlockItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}
	var dataCommitmentRule []interface{}
	for _, dataCommitmentItem := range dataCommitment {
		dataCommitmentRule = append(dataCommitmentRule, dataCommitmentItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "DataCommitmentStored", startBlockRule, endBlockRule, dataCommitmentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsDataCommitmentStored)
				if err := _Bindings.contract.UnpackLog(event, "DataCommitmentStored", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDataCommitmentStored is a log parse operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_Bindings *BindingsFilterer) ParseDataCommitmentStored(log types.Log) (*BindingsDataCommitmentStored, error) {
	event := new(BindingsDataCommitmentStored)
	if err := _Bindings.contract.UnpackLog(event, "DataCommitmentStored", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsHeadUpdateIterator is returned from FilterHeadUpdate and is used to iterate over the raw logs and unpacked data for HeadUpdate events raised by the Bindings contract.
type BindingsHeadUpdateIterator struct {
	Event *BindingsHeadUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsHeadUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsHeadUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsHeadUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsHeadUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsHeadUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsHeadUpdate represents a HeadUpdate event raised by the Bindings contract.
type BindingsHeadUpdate struct {
	BlockNumber uint64
	HeaderHash  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterHeadUpdate is a free log retrieval operation binding the contract event 0x292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d.
//
// Solidity: event HeadUpdate(uint64 blockNumber, bytes32 headerHash)
func (_Bindings *BindingsFilterer) FilterHeadUpdate(opts *bind.FilterOpts) (*BindingsHeadUpdateIterator, error) {

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "HeadUpdate")
	if err != nil {
		return nil, err
	}
	return &BindingsHeadUpdateIterator{contract: _Bindings.contract, event: "HeadUpdate", logs: logs, sub: sub}, nil
}

// WatchHeadUpdate is a free log subscription operation binding the contract event 0x292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d.
//
// Solidity: event HeadUpdate(uint64 blockNumber, bytes32 headerHash)
func (_Bindings *BindingsFilterer) WatchHeadUpdate(opts *bind.WatchOpts, sink chan<- *BindingsHeadUpdate) (event.Subscription, error) {

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "HeadUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsHeadUpdate)
				if err := _Bindings.contract.UnpackLog(event, "HeadUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHeadUpdate is a log parse operation binding the contract event 0x292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d.
//
// Solidity: event HeadUpdate(uint64 blockNumber, bytes32 headerHash)
func (_Bindings *BindingsFilterer) ParseHeadUpdate(log types.Log) (*BindingsHeadUpdate, error) {
	event := new(BindingsHeadUpdate)
	if err := _Bindings.contract.UnpackLog(event, "HeadUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Bindings contract.
type BindingsInitializedIterator struct {
	Event *BindingsInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsInitialized represents a Initialized event raised by the Bindings contract.
type BindingsInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Bindings *BindingsFilterer) FilterInitialized(opts *bind.FilterOpts) (*BindingsInitializedIterator, error) {

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BindingsInitializedIterator{contract: _Bindings.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Bindings *BindingsFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BindingsInitialized) (event.Subscription, error) {

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsInitialized)
				if err := _Bindings.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Bindings *BindingsFilterer) ParseInitialized(log types.Log) (*BindingsInitialized, error) {
	event := new(BindingsInitialized)
	if err := _Bindings.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Bindings contract.
type BindingsRoleAdminChangedIterator struct {
	Event *BindingsRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsRoleAdminChanged represents a RoleAdminChanged event raised by the Bindings contract.
type BindingsRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Bindings *BindingsFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*BindingsRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &BindingsRoleAdminChangedIterator{contract: _Bindings.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Bindings *BindingsFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *BindingsRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsRoleAdminChanged)
				if err := _Bindings.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Bindings *BindingsFilterer) ParseRoleAdminChanged(log types.Log) (*BindingsRoleAdminChanged, error) {
	event := new(BindingsRoleAdminChanged)
	if err := _Bindings.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Bindings contract.
type BindingsRoleGrantedIterator struct {
	Event *BindingsRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsRoleGranted represents a RoleGranted event raised by the Bindings contract.
type BindingsRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BindingsRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BindingsRoleGrantedIterator{contract: _Bindings.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BindingsRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsRoleGranted)
				if err := _Bindings.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) ParseRoleGranted(log types.Log) (*BindingsRoleGranted, error) {
	event := new(BindingsRoleGranted)
	if err := _Bindings.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Bindings contract.
type BindingsRoleRevokedIterator struct {
	Event *BindingsRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsRoleRevoked represents a RoleRevoked event raised by the Bindings contract.
type BindingsRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BindingsRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BindingsRoleRevokedIterator{contract: _Bindings.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BindingsRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsRoleRevoked)
				if err := _Bindings.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) ParseRoleRevoked(log types.Log) (*BindingsRoleRevoked, error) {
	event := new(BindingsRoleRevoked)
	if err := _Bindings.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Bindings contract.
type BindingsUpgradedIterator struct {
	Event *BindingsUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsUpgraded represents a Upgraded event raised by the Bindings contract.
type BindingsUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Bindings *BindingsFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BindingsUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BindingsUpgradedIterator{contract: _Bindings.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Bindings *BindingsFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BindingsUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsUpgraded)
				if err := _Bindings.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Bindings *BindingsFilterer) ParseUpgraded(log types.Log) (*BindingsUpgraded, error) {
	event := new(BindingsUpgraded)
	if err := _Bindings.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsValidatorBitmapEquivocationIterator is returned from FilterValidatorBitmapEquivocation and is used to iterate over the raw logs and unpacked data for ValidatorBitmapEquivocation events raised by the Bindings contract.
type BindingsValidatorBitmapEquivocationIterator struct {
	Event *BindingsValidatorBitmapEquivocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsValidatorBitmapEquivocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsValidatorBitmapEquivocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsValidatorBitmapEquivocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsValidatorBitmapEquivocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsValidatorBitmapEquivocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsValidatorBitmapEquivocation represents a ValidatorBitmapEquivocation event raised by the Bindings contract.
type BindingsValidatorBitmapEquivocation struct {
	TrustedBlock    uint64
	TargetBlock     uint64
	ValidatorBitmap *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterValidatorBitmapEquivocation is a free log retrieval operation binding the contract event 0x034c7608fd99db72330fdb1bcf6386af42ee9b6125664743942b942a8df4a351.
//
// Solidity: event ValidatorBitmapEquivocation(uint64 trustedBlock, uint64 targetBlock, uint256 validatorBitmap)
func (_Bindings *BindingsFilterer) FilterValidatorBitmapEquivocation(opts *bind.FilterOpts) (*BindingsValidatorBitmapEquivocationIterator, error) {

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "ValidatorBitmapEquivocation")
	if err != nil {
		return nil, err
	}
	return &BindingsValidatorBitmapEquivocationIterator{contract: _Bindings.contract, event: "ValidatorBitmapEquivocation", logs: logs, sub: sub}, nil
}

// WatchValidatorBitmapEquivocation is a free log subscription operation binding the contract event 0x034c7608fd99db72330fdb1bcf6386af42ee9b6125664743942b942a8df4a351.
//
// Solidity: event ValidatorBitmapEquivocation(uint64 trustedBlock, uint64 targetBlock, uint256 validatorBitmap)
func (_Bindings *BindingsFilterer) WatchValidatorBitmapEquivocation(opts *bind.WatchOpts, sink chan<- *BindingsValidatorBitmapEquivocation) (event.Subscription, error) {

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "ValidatorBitmapEquivocation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsValidatorBitmapEquivocation)
				if err := _Bindings.contract.UnpackLog(event, "ValidatorBitmapEquivocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorBitmapEquivocation is a log parse operation binding the contract event 0x034c7608fd99db72330fdb1bcf6386af42ee9b6125664743942b942a8df4a351.
//
// Solidity: event ValidatorBitmapEquivocation(uint64 trustedBlock, uint64 targetBlock, uint256 validatorBitmap)
func (_Bindings *BindingsFilterer) ParseValidatorBitmapEquivocation(log types.Log) (*BindingsValidatorBitmapEquivocation, error) {
	event := new(BindingsValidatorBitmapEquivocation)
	if err := _Bindings.contract.UnpackLog(event, "ValidatorBitmapEquivocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}