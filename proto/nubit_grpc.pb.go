// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: proto/nubit.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeneralDA_Store_FullMethodName    = "/generalda.GeneralDA/Store"
	GeneralDA_Read_FullMethodName     = "/generalda.GeneralDA/Read"
	GeneralDA_GetProof_FullMethodName = "/generalda.GeneralDA/GetProof"
	GeneralDA_Verify_FullMethodName   = "/generalda.GeneralDA/Verify"
)

// GeneralDAClient is the client API for GeneralDA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type GeneralDAClient interface {
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreReply, error)
	Read(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*ReadReply, error)
	GetProof(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*ProofReply, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyReply, error)
}

type generalDAClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralDAClient(cc grpc.ClientConnInterface) GeneralDAClient {
	return &generalDAClient{cc}
}

func (c *generalDAClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreReply)
	err := c.cc.Invoke(ctx, GeneralDA_Store_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalDAClient) Read(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*ReadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, GeneralDA_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalDAClient) GetProof(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*ProofReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProofReply)
	err := c.cc.Invoke(ctx, GeneralDA_GetProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalDAClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyReply)
	err := c.cc.Invoke(ctx, GeneralDA_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralDAServer is the server API for GeneralDA service.
// All implementations must embed UnimplementedGeneralDAServer
// for forward compatibility.
//
// The greeting service definition.
type GeneralDAServer interface {
	Store(context.Context, *StoreRequest) (*StoreReply, error)
	Read(context.Context, *Receipt) (*ReadReply, error)
	GetProof(context.Context, *Receipt) (*ProofReply, error)
	Verify(context.Context, *VerifyRequest) (*VerifyReply, error)
	mustEmbedUnimplementedGeneralDAServer()
}

// UnimplementedGeneralDAServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeneralDAServer struct{}

func (UnimplementedGeneralDAServer) Store(context.Context, *StoreRequest) (*StoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedGeneralDAServer) Read(context.Context, *Receipt) (*ReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedGeneralDAServer) GetProof(context.Context, *Receipt) (*ProofReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProof not implemented")
}
func (UnimplementedGeneralDAServer) Verify(context.Context, *VerifyRequest) (*VerifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedGeneralDAServer) mustEmbedUnimplementedGeneralDAServer() {}
func (UnimplementedGeneralDAServer) testEmbeddedByValue()                   {}

// UnsafeGeneralDAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralDAServer will
// result in compilation errors.
type UnsafeGeneralDAServer interface {
	mustEmbedUnimplementedGeneralDAServer()
}

func RegisterGeneralDAServer(s grpc.ServiceRegistrar, srv GeneralDAServer) {
	// If the following call pancis, it indicates UnimplementedGeneralDAServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeneralDA_ServiceDesc, srv)
}

func _GeneralDA_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralDAServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneralDA_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralDAServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralDA_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Receipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralDAServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneralDA_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralDAServer).Read(ctx, req.(*Receipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralDA_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Receipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralDAServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneralDA_GetProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralDAServer).GetProof(ctx, req.(*Receipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralDA_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralDAServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneralDA_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralDAServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneralDA_ServiceDesc is the grpc.ServiceDesc for GeneralDA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneralDA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generalda.GeneralDA",
	HandlerType: (*GeneralDAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _GeneralDA_Store_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _GeneralDA_Read_Handler,
		},
		{
			MethodName: "GetProof",
			Handler:    _GeneralDA_GetProof_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _GeneralDA_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nubit.proto",
}
